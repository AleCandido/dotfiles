# ╔══════════════════════════╗
# ║ My .zshrc further stuffs ║
# ╚══════════════════════════╝

# inter shell confs
source $SH_DIR/sh_my

# ====================================

# virtualenv prompt
export VIRTUAL_ENV_DISABLE_PROMPT=1

function virtualenv_info {
    [ $VIRTUAL_ENV ] && echo '('`basename $VIRTUAL_ENV`') '
}


# pip zsh completion
function _pip_completion {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" \
             COMP_CWORD=$(( cword-1 )) \
             PIP_AUTO_COMPLETE=1 $words[1] 2>/dev/null ))
}
compctl -K _pip_completion /usr/bin/python3 -m pip

# vim sessions script (not compatible with bash)
source $HOME/.bin/vims.sh

# ┌───┐
# │nnn│
# └───┘

n ()
{
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}


# HSTR configuration - add this to ~/.zshrc
alias hh=hstr                    # hh to be alias for hstr
setopt histignorespace           # skip cmds w/ leading space from history
export HSTR_CONFIG=hicolor       # get more colors
bindkey -s "\C-r" "\C-a hstr -- \C-j"     # bind hstr to Ctrl-r (for Vi mode check doc)

# [PageUp] - Up a line of history
if [[ "${terminfo[kpp]}" != "" ]]; then
  bindkey "${terminfo[kpp]}" up-line-or-history
  bindkey -a "${terminfo[kpp]}" up-line-or-history
fi
# [PageDown] - Down a line of history
if [[ "${terminfo[knp]}" != "" ]]; then
  bindkey "${terminfo[knp]}" down-line-or-history
  bindkey -a "${terminfo[knp]}" down-line-or-history
fi


# ╔══════╗
# ║ Misc ║
# ╚══════╝

# ---------------
# vim keybindings
# ---------------
bindkey -v
# Use vim cli mode
bindkey '^P' up-history
bindkey '^N' down-history

# backspace working even after
# returning from command mode
bindkey '^?' backward-delete-char       # insert mode
bindkey -a '^?' backward-delete-char    # command mode
# delete key
bindkey '^[[3~' delete-char             # insert mode
bindkey -a '^[[3~' delete-char          # command mode

# MOVEMENTS
#
# arrows
# [Ctrl-RightArrow]
# [Ctrl-LeftArrow] 
bindkey '^[[1;5C' vi-forward-word
bindkey '^[[1;5D' vi-backward-word-end
bindkey -a '^[[1;5C' vi-forward-blank-word
bindkey -a '^[[1;5D' vi-backward-blank-word-end


# start typing + [Up-Arrow] - fuzzy find history forward
if [[ "${terminfo[kcuu1]}" != "" ]]; then
  autoload -U up-line-or-beginning-search
  zle -N up-line-or-beginning-search
  bindkey "${terminfo[kcuu1]}" up-line-or-beginning-search
fi
# start typing + [Down-Arrow] - fuzzy find history backward
if [[ "${terminfo[kcud1]}" != "" ]]; then
  autoload -U down-line-or-beginning-search
  zle -N down-line-or-beginning-search
  bindkey "${terminfo[kcud1]}" down-line-or-beginning-search
fi

# other
# [Home] - Go to beginning of line
# [End] - Go to end of line
if [[ "${terminfo[khome]}" != "" ]]; then
      bindkey "${terminfo[khome]}" beginning-of-line      
      bindkey -a "${terminfo[khome]}" beginning-of-line
fi
if [[ "${terminfo[kend]}" != "" ]]; then
      bindkey "${terminfo[kend]}"  end-of-line    
      bindkey -a "${terminfo[kend]}"  end-of-line    
fi

# [Shift-Tab] - move through the completion menu backwards
if [[ "${terminfo[kcbt]}" != "" ]]; then
  bindkey "${terminfo[kcbt]}" reverse-menu-complete
fi

# ctrl-w removed word backwards
bindkey '^w' backward-kill-word

# ctrl-r starts searching history backward
bindkey '^r' history-incremental-search-backward

# ---------------
# suppress shared history
# ---------------
unsetopt share_history

# ╔══════════════════════════════════════╗
# ║ Stuffs executed just before entering ║
# ╚══════════════════════════════════════╝

#tmux
